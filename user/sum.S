# Функция, проверяющая, является ли символ пробелом
isWhitespace:
    addi    sp,sp,-32       # Резервирование места в стеке
    sd      s0,24(sp)       # Сохранение регистра s0 в стеке
    addi    s0,sp,32        # Инициализация указателя s0 на верх стека
    mv      a5,a0           # Копирование значения a0 в a5 (аргумент функции)
    sb      a5,-17(s0)       # Сохранение младшего байта a5 в стеке
    lbu     a5,-17(s0)       # Загрузка младшего байта из стека в a5
    andi    a4,a5,0xff       # Применение маски 0xff для получения младшего байта a5
    li      a5,32            # Загрузка значения 32 в a5
    beq     a4,a5,.L2        # Если a4 равно 32, перейти к .L2
    lbu     a5,-17(s0)       # Загрузка младшего байта из стека в a5
    andi    a4,a5,0xff       # Применение маски 0xff для получения младшего байта a5
    li      a5,10            # Загрузка значения 10 в a5
    beq     a4,a5,.L2        # Если a4 равно 10, перейти к .L2
    lbu     a5,-17(s0)       # Загрузка младшего байта из стека в a5
    andi    a5,a5,0xff       # Применение маски 0xff для получения младшего байта a5
    beq     a5,zero,.L2      # Если a5 равно 0, перейти к .L2
    lbu     a5,-17(s0)       # Загрузка младшего байта из стека в a5
    andi    a4,a5,0xff       # Применение маски 0xff для получения младшего байта a5
    li      a5,13            # Загрузка значения 13 в a5
    bne     a4,a5,.L3        # Если a4 не равно 13, перейти к .L3
.L2:
    li      a5,1             # Установка a5 в 1 (символ является пробелом)
    j       .L4              # Безусловный переход к .L4
.L3:
    li      a5,0             # Установка a5 в 0 (символ не является пробелом)
.L4:
    mv      a0,a5           # Перемещение значения a5 в a0 (результат функции)
    ld      s0,24(sp)        # Восстановление регистра s0 из стека
    addi    sp,sp,32         # Освобождение зарезервированного места в стеке
    jr      ra               # Возврат из функции

# Функция, проверяющая, является ли символ цифрой
isDigit:
    addi    sp,sp,-32       # Резервирование места в стеке
    sd      s0,24(sp)       # Сохранение регистра s0 в стеке
    addi    s0,sp,32        # Инициализация указателя s0 на верх стека
    mv      a5,a0           # Копирование значения a0 в a5 (аргумент функции)
    sb      a5,-17(s0)       # Сохранение младшего байта a5 в стеке
    lbu     a5,-17(s0)       # Загрузка младшего байта из стека в a5
    andi    a4,a5,0xff       # Применение маски 0xff для получения младшего байта a5
    li      a5,47            # Загрузка значения 47 в a5
    bleu    a4,a5,.L7        # Если a4 меньше или равно 47, перейти к .L7
    lbu     a5,-17(s0)       # Загрузка младшего байта из стека в a5
    andi    a4,a5,0xff       # Применение маски 0xff для получения младшего байта a5
    li      a5,57            # Загрузка значения 57 в a5
    bgtu    a4,a5,.L7        # Если a4 больше 57, перейти к .L7
    li      a5,1             # Установка a5 в 1 (символ является цифрой)
    j       .L8              # Безусловный переход к .L8
.L7:
    li      a5,0             # Установка a5 в 0 (символ не является цифрой)
.L8:
    mv      a0,a5           # Перемещение значения a5 в a0 (результат функции)
    ld      s0,24(sp)        # Восстановление регистра s0 из стека
    addi    sp,sp,32         # Освобождение зарезервированного места в стеке
    jr      ra               # Возврат из функции

.LC0:
    .string "error: there is only one number given, must be two\n"

.LC1:
    .string "error: invalid syntax\n"

.LC2:
    .string "error: buffer overflow\n"

.LC3:
    .string "%d\n"

main:
    addi    sp,sp,-96        # Резервирование места в стеке
    sd      ra,88(sp)        # Сохранение регистра ra в стеке
    sd      s0,80(sp)        # Сохранение регистра s0 в стеке
    sd      s1,72(sp)        # Сохранение регистра s1 в стеке
    addi    s0,sp,96         # Инициализация указателя s0 на верх стека
    mv      a5,a0            # Копирование значения a0 в a5 (аргумент функции)
    sd      a1,-96(s0)        # Сохранение значения a1 в локальной переменной на стеке
    sw      a5,-84(s0)        # Сохранение значения a5 в локальной переменной на стеке
    addi    a5,s0,-80         # Инициализация указателя a5 на буфер в стеке
    li      a1,23             # Загрузка значения 23 в a1
    mv      a0,a5            # Передача указателя a5 в a0 (аргумент функции)
    call    gets              # Вызов функции gets для ввода данных
    addi    a5,s0,-80         # Инициализация указателя a5 на буфер в стеке
    addi    a5,a5,22          # Смещение указателя a5 на 22 байта
    sd      a5,-56(s0)        # Сохранение нового указателя a5 в локальной переменной на стеке
    addi    a5,s0,-80         # Инициализация указателя a5 на буфер в стеке
    sd      a5,-40(s0)        # Сохранение указателя a5 в локальной переменной на стеке
    nop
    ld      a4,-40(s0)        # Загрузка значения по указателю a4 из буфера в стеке
    ld      a5,-56(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    beq     a4,a5,.L15        # Если a4 равно a5, перейти к .L15
    ld      a5,-40(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    lbu     a5,0(a5)          # Загрузка младшего байта из a5
    mv      a0,a5            # Перемещение значения a5 в a0 (аргумент функции)
    call    isWhitespace      # Вызов функции isWhitespace
    mv      a5,a0            # Перемещение значения из a0 в a5 (результат функции)
    beq     a5,zero,.L12      # Если a5 равно 0, перейти к .L12
    li      a2,50             # Загрузка значения 50 в a2 (длина сообщения об ошибке)
    lui     a5,%hi(.LC0)      # Загрузка верхних 20 бит адреса .LC0 в a5
    addi    a1,a5,%lo(.LC0)   # Загрузка нижних 12 бит адреса .LC0 в a1
    li      a0,2              # Загрузка значения 2 в a0 (дескриптор файла stderr)
    call    write             # Вызов функции write для вывода сообщения об ошибке
    li      a0,1              # Загрузка значения 1 в a0 (код завершения)
    call    exit              # Вызов функции exit для завершения программы
.L12:
    ld      a5,-40(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    lbu     a5,0(a5)          # Загрузка младшего байта из a5
    mv      a0,a5            # Перемещение значения a5 в a0 (аргумент функции)
    call    isDigit           # Вызов функции isDigit
    mv      a5,a0            # Перемещение значения из a0 в a5 (результат функции)
    beq     a5,zero,.L13      # Если a5 равно 0, перейти к .L13
    ld      a5,-40(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    addi    a5,a5,1           # Увеличение указателя a5 на 1
    sd      a5,-40(s0)        # Сохранение нового указателя a5 в буфере в стеке
.L13:
    ld      a5,-40(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    lbu     a5,0(a5)          # Загрузка младшего байта из a5
    mv      a4,a5            # Перемещение значения a5 в a4
    li      a5,32             # Загрузка значения 32 в a5
    beq     a4,a5,.L23        # Если a4 равно 32, перейти к .L23
    li      a2,21             # Загрузка значения 21 в a2 (длина сообщения об ошибке)
    lui     a5,%hi(.LC1)      # Загрузка верхних 20 бит адреса .LC1 в a5
    addi    a1,a5,%lo(.LC1)   # Загрузка нижних 12 бит адреса .LC1 в a1
    li      a0,2              # Загрузка значения 2 в a0 (дескриптор файла stderr)
    call    write             # Вызов функции write для вывода сообщения об ошибке
    li      a0,3              # Загрузка значения 3 в a0 (код завершения)
    call    exit              # Вызов функции exit для завершения программы
.L23:
    nop
.L15:
    ld      a5,-40(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    addi    a4,a5,1           # Увеличение указателя a4 на 1
    sd      a4,-40(s0)        # Сохранение нового указателя a4 в буфере в стеке
    sd      a5,-48(s0)        # Сохранение значения по указателю a5 в буфере в стеке
    j       .L17              # Безусловный переход к .L17
.L21:
    ld      a5,-48(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    lbu     a5,0(a5)          # Загрузка младшего байта из a5
    mv      a0,a5            # Перемещение значения a5 в a0 (аргумент функции)
    call    isWhitespace      # Вызов функции isWhitespace
    mv      a5,a0            # Перемещение значения из a0 в a5 (результат функции)
    bne     a5,zero,.L24      # Если a5 не равно 0, перейти к .L24
    ld      a5,-48(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    lbu     a5,0(a5)          # Загрузка младшего байта из a5
    mv      a0,a5            # Перемещение значения a5 в a0 (аргумент функции)
    call    isDigit           # Вызов функции isDigit
    mv      a5,a0            # Перемещение значения из a0 в a5 (результат функции)
    beq     a5,zero,.L20      # Если a5 равно 0, перейти к .L20
    ld      a5,-48(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    addi    a5,a5,1           # Увеличение указателя a5 на 1
    sd      a5,-48(s0)        # Сохранение нового указателя a5 в буфере в стеке
    j       .L17              # Безусловный переход к .L17
.L20:
    li      a2,22             # Загрузка значения 22 в a2 (длина сообщения об ошибке)
    lui     a5,%hi(.LC1)      # Загрузка верхних 20 бит адреса .LC1 в a5
    addi    a1,a5,%lo(.LC1)   # Загрузка нижних 12 бит адреса .LC1 в a1
    li      a0,2              # Загрузка значения 2 в a0 (дескриптор файла stderr)
    call    write             # Вызов функции write для вывода сообщения об ошибке
    li      a0,3              # Загрузка значения 3 в a0 (код завершения)
    call    exit              # Вызов функции exit для завершения программы
.L17:
    ld      a4,-48(s0)        # Загрузка значения по указателю a4 из буфера в стеке
    ld      a5,-56(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    bltu    a4,a5,.L21        # Если a4 меньше a5, перейти к .L21
    j       .L19              # Безусловный переход к .L19
.L24:
    nop
.L19:
    ld      a4,-48(s0)        # Загрузка значения по указателю a4 из буфера в стеке
    ld      a5,-56(s0)        # Загрузка значения по указателю a5 из буфера в стеке
    bltu    a4,a5,.L22        # Если a4 меньше a5, перейти к .L22
    li      a2,23             # Загрузка значения 23 в a2 (длина сообщения об ошибке)
    lui     a5,%hi(.LC2)      # Загрузка верхних 20 бит адреса .LC2 в a5
    addi    a1,a5,%lo(.LC2)   # Загрузка нижних 12 бит адреса .LC2 в a1
    li      a0,2              # Загрузка значения 2 в a0 (дескриптор файла stderr)
    call    write             # Вызов функции write для вывода сообщения об ошибке
    li      a0,2              # Загрузка значения 2 в a0 (код завершения)
    call    exit              # Вызов функции exit для завершения программы
.L22:
    addi    a5,s0,-80         # Инициализация указателя a5 на буфер в стеке
    mv      a0,a5            # Передача указателя a5 в a0 (аргумент функции)
    call    atoi              # Вызов функции atoi для преобразования строки в число
    mv      a5,a0            # Перемещение значения из a0 в a5
    mv      s1,a5            # Сохранение значения a5 в регистре s1
    ld      a0,-40(s0)        # Загрузка значения по указателю a0 из буфера в стеке
    call    atoi              # Вызов функции atoi для преобразования строки в число
    mv      a5,a0            # Перемещение значения из a0 в a5
    mv      a1,a5            # Перемещение значения из a5 в a1
    mv      a0,s1            # Перемещение значения из s1 в a0
    call    add               # Вызов функции add для сложения двух чисел
    mv      a5,a0            # Перемещение значения из a0 в a5
    mv      a1,a5            # Перемещение значения из a5 в a1
    lui     a5,%hi(.LC3)      # Загрузка верхних 20 бит адреса .LC3 в a5
    addi    a0,a5,%lo(.LC3)   # Загрузка нижних 12 бит адреса .LC3 в a0
    call    printf            # Вызов функции printf для вывода результата
    li      a0,0              # Загрузка значения 0 в a0 (код завершения)
    call    exit              # Вызов функции exit для завершения программы
